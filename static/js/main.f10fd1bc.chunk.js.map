{"version":3,"sources":["MonoSynth/styles.module.css","MonoSynth/Keyboard.tsx","MonoSynth/RibbonKeyboard.tsx","MonoSynth/VCO.tsx","MonoSynth/LFOPad.tsx","hooks/useFrequency.ts","hooks/useNormalRangeParam.ts","MonoSynth/ScaledEnvelope.ts","ScaledRangeInput.tsx","MonoSynth/FilterController.tsx","MonoSynth/ToneViz.tsx","MonoSynth/audioBufferSVGPath.ts","MonoSynth/EnvelopeCurveController.tsx","MonoSynth/EnvelopeController.tsx","MonoSynth/ScaledEnvelopeController.tsx","MonoSynth/FFTViz.tsx","MonoSynth/WaveformViz.tsx","MonoSynth/HarmonicsController.tsx","MonoSynth/DelayModule.tsx","MonoSynth/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","noteIsEqual","a","b","OTTAVA_MAP","n","m","v","c","x","z","OTTAVA_KEYS","Set","Object","keys","KEYMAP","1","q","2","w","e","4","r","5","t","6","y","7","u","8","i","o","0","p","Keyboard","props","triggerAttack","triggerRelease","useState","activeNote","setActiveNote","activeOttavaKey","setActiveOttavaKey","handleKeyDown","useCallback","evt","note","key","undefined","preventDefault","has","handleKeyUp","useEffect","octaveOffset","playedNote","join","document","addEventListener","removeEventListener","WIDTH","HEIGHT","MUSICAL_CONST","Math","pow","MIDDLE_C","scaleRibbon","scaleLinear","domain","RIBBON_SPAN","range","clamp","getOctaveTicks","semitoneOffset","OCTAVES","map","octaveIdx","Margin","bottomTickLabelProps","textAnchor","fontFamily","fontSize","fill","dy","RibbonKeyboard","onFrequencyChange","dragging","setDragging","ribbonRef","useRef","activeFreq","setActiveFreq","handleTriggerAttack","freq","Tone","toFrequency","handleTriggerRelease","getMouseFrequency","current","boundingRect","getBoundingClientRect","clientX","left","anchorFrequency","halfSteps","getFrequency","stopDrag","handleMouseMove","handleMouseDown","nativeEvent","evenOctaveTicks","filter","_","idx","oddOctaveTicks","activeNoteX","useMemo","frequency","log","width","Left","Right","height","Top","Bottom","style","userSelect","className","cs","ribbonKeyboard","Group","top","fontWeight","ref","onMouseDown","GridColumns","scale","stroke","strokeWidth","tickValues","lineStyle","pointerEvents","AxisBottom","tickFormat","value","floor","valueOf","tickLabelProps","tickLength","hideAxisLine","x1","y1","x2","y2","activeMarker","dutyCycleFormat","format","harmonicityInterpolator","piecewise","interpolateNumber","semitoneScale","OSCILLATOR_OPTIONS","label","MODULATION_OPTIONS","PulseOscillatorControls","oscillator","setWidth","dutyCycle","setValueAtTime","control","type","min","max","step","onChange","parseFloat","target","HarmonicOscillatorControls","semitones","setSemitones","harmonicity","semitoneToHarmonicity","VCO","oscType","setOscType","modulationType","setModulationType","textAlign","inlineControl","name","options","scaleFreq","scaleSymlog","scaleDepth","leftTickLabelProps","dx","LFOPad","lfo","leftAxisTickFormat","leftAxisLabel","frequencySignal","depthParam","amplitude","setFreq","now","cancelScheduledValues","useFrequency","normalRangeParam","setValue","useNormalRangeParam","depth","setDepth","padRef","markerCoords","updateMarkerCoords","clientY","invert","lfoPad","cursor","numTicks","tickStroke","labelProps","AxisLeft","labelOffset","GridRows","lfoPadMarker","cx","cy","ScaledEnvelope","sustain","fixedSustain","output","context","_sig","connect","updateSustain","this","Error","difference","dispose","val","ScaledRangeInput","onUpdate","rest","newValue","scalePow","exponent","formatFreq","formatQuality","FILTER_OPTIONS","FILTERS_WITH_GAIN","FilterController","filterEnvelope","filterType","setFilterType","baseFrequency","quality","setQuality","gain","setGain","Q","option","Padding","DEFAULT_BOUNDS","ToneViz","contextRecorder","recordDuration","bounds","sampleRate","status","asyncToneBuffer","setAsyncToneBuffer","updateGraph","then","buffer","catch","error","path","toneBuffer","numSamples","scaleNormalize","get","bufferData","getChannelData","length","linePath","ceil","index","replace","audioBufferSVGPath","toneViz","window","transform","d","tonePath","BASIC_CURVE_OPTIONS","ALL_CURVE_OPTIONS","EnvelopeCurveController","attackCurve","onAttackCurveChange","decayCurve","onDecayCurveChange","releaseCurve","onReleaseCurveChange","scaleOnsetDuration","formatTime","formatPercent","EnvelopeController","envelope","attack","toSeconds","decay","onsetDuration","setOnsetDuration","percentAttack","setPercentAttack","setSustain","release","setRelease","setAttackCurve","setDecayCurve","setReleaseCurve","recordEnvelope","toDestination","triggerAttackRelease","MAX_ONSET_DURATION","VIZ_BOUNDS","ScaledEnvelopeController","minLabel","formatMin","maxLabel","formatMax","envelopeMin","setEnvelopeMin","envelopeMax","setEnvelopeMax","INNER_HEIGHT","constant","scaleDecibels","axisScaleDecibels","xAxisTickValues","FFTViz","meter","Float32Array","setBuffer","svgPathCommand","getFrequencyOfIndex","intervalId","setInterval","getValue","clearInterval","Grid","xScale","yScale","columnTickValues","INNER_WIDTH","scaleAmplitude","flipScaleAmplitude","copy","formatAmplitude","amplitudeTickValues","WaveformViz","waveformPeriodIndices","trigger","startFound","periodIndices","push","getWindowBounds","numPeriods","setNumPeriods","useLayoutEffect","prevNumPeriods","startIndex","waveformPath","HarmonicsController","subOscEnabled","subSubOscEnabled","onSubOscEnabledChange","onSubSubOscEnabledChange","handleSubOscChange","handleSubSubOscChange","checked","scaleDelay","scaleFeedback","formatNumber","DelayModule","delayNode","disabled","onDisabledChange","delayTime","setDelayTime","feedback","setFeedback","lookAhead","positiveSemitoneFormat","detuneFormat","MonoSynth","synth","fft","waveform","subOscillator","setSubOscEnabled","subSubOscillator","setSubSubOscEnabled","delayDisabled","setDelayDisabled","detuneLFO","pitchEnvelope","start","stop","changeFrequency","hz","formatDetune","detune","disconnect","chain","destination","synthContainer","keyboardContainer","fixedFooter","synthControls","App","started","setStarted","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f10fd1bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"synthContainer\":\"styles_synthContainer__25COg\",\"fixedFooter\":\"styles_fixedFooter__17TPe\",\"lfoPad\":\"styles_lfoPad__14Teb\",\"lfoPadMarker\":\"styles_lfoPadMarker__NNvwW\",\"monosynth\":\"styles_monosynth__2UWkf\",\"synthControls\":\"styles_synthControls__2a4uM\",\"control\":\"styles_control__1qSDq\",\"inlineControl\":\"styles_inlineControl__E3lmz\",\"toneViz\":\"styles_toneViz__1Q9Jz\",\"window\":\"styles_window__3FwCY\",\"tonePath\":\"styles_tonePath__3_MqH\",\"waveformPath\":\"styles_waveformPath__1jFzH\",\"keyboardContainer\":\"styles_keyboardContainer__6MpAf\",\"ribbonKeyboard\":\"styles_ribbonKeyboard__3uewh\",\"activeMarker\":\"styles_activeMarker__G_3qO\",\"keyboardLabel\":\"styles_keyboardLabel__2obi5\"};","import React from 'react'\nimport { useCallback, useEffect, useState } from 'react'\nimport * as Tone from 'tone'\n\nimport { Dictionary } from '../types'\n\n// [note, octave] tuples\ntype Note = [string, number]\n\nfunction noteIsEqual(a: Note | null, b: Note | null) {\n  if (a === null && b === null) return true\n  if (a === null) return false\n  if (b === null) return false\n\n  return a[0] === b[0] && a[1] === b[1]\n}\n\n// Map from key to # octaves to offset\nconst OTTAVA_MAP: Dictionary<string, number> = {\n  b: 1,\n  n: 2,\n  m: 3,\n  ',': 4,\n  v: -1,\n  c: -2,\n  x: -3,\n  z: -4,\n}\n\nconst OTTAVA_KEYS = new Set(Object.keys(OTTAVA_MAP))\n\n// Intuition: Hands should feel comfortable above home row. Spacebar is middle C.\nconst KEYMAP: Dictionary<string, Note> = {\n  1: ['Db', 3],\n  q: ['D', 3],\n  2: ['Eb', 3],\n  w: ['E', 3],\n  e: ['F', 3],\n  4: ['Gb', 3],\n  r: ['G', 3],\n  5: ['Ab', 3],\n  t: ['A', 3],\n  6: ['Bb', 3],\n  y: ['B', 3],\n  ' ': ['C', 4], // Middle C\n  7: ['C#', 4],\n  u: ['D', 4],\n  8: ['D#', 4],\n  i: ['E', 4],\n  o: ['F', 4],\n  0: ['F#', 4],\n  p: ['G', 4],\n  '-': ['G#', 4],\n  '[': ['A', 4],\n  '=': ['A#', 4],\n  ']': ['B', 4],\n}\n\ninterface KeyboardProps {\n  triggerAttack: (note: string | number | Tone.FrequencyClass<number>) => void\n  triggerRelease: () => void\n}\n\nexport default function Keyboard(props: KeyboardProps): JSX.Element {\n  const { triggerAttack, triggerRelease } = props\n  const [activeNote, setActiveNote] = useState<Note | null>(null)\n  const [activeOttavaKey, setActiveOttavaKey] = useState<string | null>(null)\n\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      const note = KEYMAP[evt.key]\n      if (note !== undefined && !noteIsEqual(note, activeNote)) {\n        setActiveNote(note)\n      }\n\n      // Prevent the spacebar from scrolling the page\n      if (evt.key === ' ') {\n        evt.preventDefault()\n      }\n\n      if (OTTAVA_KEYS.has(evt.key) && activeOttavaKey === null) {\n        setActiveOttavaKey(evt.key)\n      }\n    },\n    [activeNote, activeOttavaKey]\n  )\n\n  const handleKeyUp = useCallback(\n    (evt: KeyboardEvent) => {\n      const note = KEYMAP[evt.key]\n      if (note && noteIsEqual(note, activeNote)) {\n        triggerRelease()\n        setActiveNote(null)\n      }\n      if (activeOttavaKey === evt.key) {\n        setActiveOttavaKey(null)\n      }\n    },\n    [triggerRelease, activeNote, activeOttavaKey]\n  )\n\n  // triggerAttack\n  useEffect(() => {\n    if (!activeNote) return\n\n    const octaveOffset =\n      (activeOttavaKey ? OTTAVA_MAP[activeOttavaKey] : 0) || 0\n    const playedNote = [activeNote[0], activeNote[1] + octaveOffset]\n    triggerAttack(playedNote.join(''))\n  }, [activeNote, triggerAttack, activeOttavaKey])\n\n  // useKeyboardEffect\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n    document.addEventListener('keyup', handleKeyUp)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n      document.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [handleKeyDown, handleKeyUp])\n\n  return <></>\n}\n","import React from 'react'\nimport { useRef, useCallback, useState, useEffect, useMemo } from 'react'\nimport * as Tone from 'tone'\nimport { GridColumns } from '@vx/grid'\nimport { Group } from '@vx/group'\nimport { AxisBottom } from '@vx/axis'\nimport { scaleLinear, NumberValue } from 'd3-scale'\nimport { range } from 'd3'\n\nimport Keyboard from './Keyboard'\nimport cs from './styles.module.css'\n\nconst WIDTH = 800\nconst HEIGHT = 50\nconst MIDDLE_C_POS = WIDTH / 2\n\nconst MUSICAL_CONST = Math.pow(2, 1 / 12)\n// Frequency of C4\nconst MIDDLE_C = 261.626\n\nconst OCTAVES = 8\n\n// Semitones that the keyboard spans\nconst RIBBON_SPAN = 12 * OCTAVES\n\nconst scaleRibbon = scaleLinear()\n  .domain([-RIBBON_SPAN / 2, RIBBON_SPAN / 2])\n  .range([0, WIDTH])\n  .clamp(true)\n\n/*\n * Given half steps from a fixed point (e.g., C4), get frequency.\n * Uses the equation frequency = f0 * 2^(1/12)^half_steps\n */\nfunction getFrequency(anchorFrequency: number, halfSteps: number): number {\n  return anchorFrequency * Math.pow(MUSICAL_CONST, halfSteps)\n}\n\n/**\n * Given frequency, get number of half steps from fixed point (e.g., C4)\n */\nfunction getHalfSteps(anchorFrequency: number, frequency: number): number {\n  return Math.log(frequency / anchorFrequency) / Math.log(MUSICAL_CONST)\n}\n\nfunction getOctaveTicks(semitoneOffset: number): number[] {\n  return range(OCTAVES + 1).map(\n    (octaveIdx) => (octaveIdx - OCTAVES / 2) * 12 + semitoneOffset\n  )\n}\n\nconst bottomTickLabelProps = () =>\n  ({\n    textAnchor: 'middle',\n    fontFamily: 'Arial',\n    fontSize: 10,\n    fill: 'white',\n    dy: '0.25em',\n  } as const)\n\nenum Margin {\n  Top = 16,\n  Right = 16,\n  Left = 16,\n  Bottom = 20,\n}\n\ninterface RibbonKeyboardProps {\n  onFrequencyChange: (hz: number) => void\n  triggerAttack: (note: string | number | Tone.FrequencyClass<number>) => void\n  triggerRelease: () => void\n}\n\nexport default function RibbonKeyboard(\n  props: RibbonKeyboardProps\n): JSX.Element {\n  const { triggerAttack, triggerRelease, onFrequencyChange } = props\n  const [dragging, setDragging] = useState(false)\n  const ribbonRef = useRef<SVGRectElement>(null)\n  const [activeFreq, setActiveFreq] = useState<number | null>(null)\n\n  const handleTriggerAttack = useCallback(\n    (freq: string | number | Tone.FrequencyClass<number>) => {\n      triggerAttack(freq)\n      setActiveFreq(Tone.Frequency(freq).toFrequency())\n    },\n    [triggerAttack]\n  )\n\n  const handleTriggerRelease = useCallback(() => {\n    triggerRelease()\n    setActiveFreq(null)\n  }, [triggerRelease])\n\n  const getMouseFrequency = useCallback((evt: MouseEvent): number | null => {\n    if (!ribbonRef.current) return null\n\n    const boundingRect = ribbonRef.current.getBoundingClientRect()\n    const x = evt.clientX - boundingRect.left\n    const halfSteps = ((x - MIDDLE_C_POS) / WIDTH) * RIBBON_SPAN\n\n    return getFrequency(MIDDLE_C, halfSteps)\n  }, [])\n\n  const stopDrag = useCallback(() => {\n    setDragging(false)\n  }, [])\n\n  const handleMouseMove = useCallback(\n    (evt: MouseEvent) => {\n      if (dragging) {\n        const freq = getMouseFrequency(evt)\n        if (freq !== null) {\n          onFrequencyChange(freq)\n          setActiveFreq(Tone.Frequency(freq).toFrequency())\n        }\n      }\n    },\n    [dragging, getMouseFrequency, onFrequencyChange]\n  )\n\n  const handleMouseDown = useCallback(\n    (evt: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n      setDragging(true)\n      const freq = getMouseFrequency(evt.nativeEvent)\n      if (freq !== null) handleTriggerAttack(freq)\n    },\n    [handleTriggerAttack, getMouseFrequency]\n  )\n\n  useEffect(() => {\n    if (dragging) {\n      document.addEventListener('mousemove', handleMouseMove)\n      document.addEventListener('mouseup', stopDrag)\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove)\n      document.removeEventListener('mouseup', stopDrag)\n    }\n  }, [dragging, handleMouseMove, stopDrag])\n\n  useEffect(() => {\n    if (!dragging) handleTriggerRelease()\n  }, [dragging, handleTriggerRelease])\n\n  const evenOctaveTicks = getOctaveTicks(0).filter((_, idx) => idx % 2 === 0)\n  const oddOctaveTicks = getOctaveTicks(0).filter((_, idx) => idx % 2 === 1)\n  const activeNoteX = useMemo(() => {\n    if (activeFreq !== null) {\n      const x = scaleRibbon(getHalfSteps(MIDDLE_C, activeFreq))\n      return x !== undefined ? x : null\n    }\n    return null\n  }, [activeFreq])\n\n  return (\n    <>\n      <svg\n        width={WIDTH + Margin.Left + Margin.Right}\n        height={HEIGHT + Margin.Top + Margin.Bottom}\n        style={{ userSelect: 'none' }}\n        className={cs.ribbonKeyboard}\n      >\n        <Group left={Margin.Left} top={Margin.Top}>\n          <text\n            fill=\"white\"\n            fontFamily=\"Arial\"\n            fontSize={10}\n            fontWeight=\"bold\"\n            textAnchor=\"middle\"\n            x={WIDTH / 2}\n            y=\"-6px\"\n          >\n            Keyboard\n          </text>\n          <rect\n            ref={ribbonRef}\n            width={WIDTH}\n            height={HEIGHT}\n            style={{ fill: 'white' }}\n            onMouseDown={handleMouseDown}\n          />\n          {/* Draw columns at octaves */}\n          <GridColumns\n            height={HEIGHT}\n            scale={scaleRibbon}\n            stroke=\"#bbb\"\n            strokeWidth={1}\n            tickValues={oddOctaveTicks}\n            lineStyle={{ pointerEvents: 'none' }}\n          />\n          <GridColumns\n            height={HEIGHT}\n            scale={scaleRibbon}\n            stroke=\"#666\"\n            strokeWidth={1}\n            tickValues={evenOctaveTicks}\n            lineStyle={{ pointerEvents: 'none' }}\n          />\n          <AxisBottom\n            top={HEIGHT}\n            scale={scaleRibbon}\n            tickValues={evenOctaveTicks}\n            tickFormat={(value: NumberValue) =>\n              `C${Math.floor(value.valueOf() / 12) + 4}`\n            }\n            tickLabelProps={bottomTickLabelProps}\n            tickLength={0}\n            hideAxisLine\n          />\n          {/* Draw active frequency */}\n          {activeNoteX !== null && (\n            <line\n              x1={activeNoteX}\n              y1={0}\n              x2={activeNoteX}\n              y2={HEIGHT}\n              strokeWidth={3}\n              className={cs.activeMarker}\n            />\n          )}\n        </Group>\n      </svg>\n      <Keyboard\n        triggerAttack={handleTriggerAttack}\n        triggerRelease={handleTriggerRelease}\n      />\n    </>\n  )\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport * as Tone from 'tone'\nimport { format } from 'd3-format'\nimport { scaleLinear } from 'd3-scale'\nimport { piecewise, interpolateNumber } from 'd3-interpolate'\n\nimport cs from './styles.module.css'\n\ntype OscillatorType = 'sine' | 'square' | 'triangle' | 'sawtooth' | 'pulse'\n\nconst dutyCycleFormat = format('.0%')\nconst semitoneFormat = (v: number) => `${format('.1f')(v)} st`\n// Map from # semitones offset from the center to the frequency ratio (e.g., 4:3 = perfect fifth up)\n// https://en.wikipedia.org/wiki/Interval_(music)#Size_of_intervals_used_in_different_tuning_systems\nconst harmonicityInterpolator = piecewise(interpolateNumber, [\n  1 / 2, // Perfect octave down\n  8 / 15, // Major seventh down\n  9 / 16, // Minor seventh down, etc\n  3 / 5,\n  5 / 8,\n  2 / 3,\n  32 / 45,\n  3 / 4,\n  4 / 5,\n  5 / 6,\n  8 / 9,\n  15 / 16,\n  1 / 1, // Perfect unison\n  16 / 15,\n  9 / 8,\n  6 / 5,\n  5 / 4,\n  4 / 3,\n  45 / 32,\n  3 / 2,\n  8 / 5,\n  5 / 3,\n  16 / 9,\n  15 / 8,\n  2 / 1, // Perfect octave up\n])\n\nconst semitoneScale = scaleLinear([-12, 12], [0, 1])\nconst semitoneToHarmonicity = (semitones: number) =>\n  harmonicityInterpolator(semitoneScale(semitones) as number)\n\nconst OSCILLATOR_OPTIONS = [\n  {\n    label: 'Sine',\n    value: 'sine',\n  },\n  {\n    label: 'Triangle',\n    value: 'triangle',\n  },\n  {\n    label: 'Sawtooth',\n    value: 'sawtooth',\n  },\n  {\n    label: 'Square',\n    value: 'square',\n  },\n  {\n    label: 'Pulse',\n    value: 'pulse',\n  },\n]\n\nconst MODULATION_OPTIONS = [\n  {\n    label: 'None',\n    value: '',\n  },\n  {\n    label: 'Frequency',\n    value: 'fm',\n  },\n  {\n    label: 'Amplitude',\n    value: 'am',\n  },\n  {\n    label: 'Fat',\n    value: 'fat',\n  },\n]\n\ninterface OscillatorControllerProps<\n  T extends Tone.PulseOscillator | Tone.AMOscillator | Tone.FMOscillator\n> {\n  oscillator: Tone.OmniOscillator<T>\n}\n\nfunction PulseOscillatorControls(\n  props: OscillatorControllerProps<Tone.PulseOscillator>\n): JSX.Element {\n  const { oscillator } = props\n  // Width is in [-1, 0, 1]\n  const [width, setWidth] = useState(0)\n  // Duty cycle is in [0, 1]\n  const dutyCycle = (width + 1) / 2\n\n  // syncWidth\n  useEffect(() => {\n    // Sometimes while switching oscillators, we render before Tonejs switches\n    // So we have to check that width exists\n    if (oscillator.width) {\n      oscillator.width.setValueAtTime(width, Tone.now())\n    }\n  }, [width, oscillator.width])\n\n  return (\n    <div className={cs.control}>\n      <label>\n        <span>\n          Width\n          <output>{dutyCycleFormat(dutyCycle)}</output>\n        </span>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.01\"\n          value={dutyCycle}\n          onChange={(evt) => setWidth(parseFloat(evt.target.value) * 2 - 1)}\n        />\n      </label>\n    </div>\n  )\n}\n\nfunction HarmonicOscillatorControls<\n  T extends Tone.AMOscillator | Tone.FMOscillator\n>(props: OscillatorControllerProps<T>): JSX.Element {\n  const { oscillator } = props\n  // Set the semitone offset between the carrier and modulating frequencies\n  const [semitones, setSemitones] = useState(0)\n\n  // syncHarmonicity\n  useEffect(() => {\n    // Sometimes while switching oscillators, we render before Tonejs switches\n    // So we have to check that harmonicity exists\n    if (oscillator.harmonicity) {\n      const harmonicity = semitoneToHarmonicity(semitones)\n      oscillator.harmonicity.setValueAtTime(harmonicity, Tone.now())\n    }\n  }, [semitones, oscillator.harmonicity])\n\n  return (\n    <div className={cs.control}>\n      <label>\n        <span>\n          Harmonicity\n          <output>{semitoneFormat(semitones)}</output>\n        </span>\n        <input\n          type=\"range\"\n          min=\"-12\"\n          max=\"12\"\n          step=\"0.1\"\n          value={semitones}\n          onChange={(evt) => setSemitones(parseFloat(evt.target.value))}\n        />\n      </label>\n    </div>\n  )\n}\n\ninterface VCOProps {\n  oscillator: Tone.OmniOscillator<any> // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport default function VCO(props: VCOProps): JSX.Element {\n  const { oscillator } = props\n  // @ts-ignore Tonejs doesn't export the OmniOscillatorType for us to use\n  const [oscType, setOscType] = useState<OscillatorType>(oscillator.type)\n  const [modulationType, setModulationType] = useState<string>('')\n\n  // syncOscillatorType\n  useEffect(() => {\n    if (oscType === 'pulse') {\n      oscillator.type = 'pulse'\n    } else {\n      // @ts-ignore Tonejs doesn't export the OmniOscillatorType for us to coerce\n      oscillator.type = modulationType + oscType\n    }\n  }, [oscillator, oscType, modulationType])\n\n  return (\n    <form style={{ textAlign: 'center', width: 300 }}>\n      <div className={cs.inlineControl}>\n        <label>\n          <span>Type</span>\n          <select\n            name=\"osc-type\"\n            value={oscType}\n            onChange={(evt) => setOscType(evt.target.value as OscillatorType)}\n          >\n            {OSCILLATOR_OPTIONS.map((options) => (\n              <option key={options.value} value={options.value}>\n                {options.label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      {oscType !== 'pulse' && (\n        <div className={cs.inlineControl}>\n          <label>\n            <span>Modulation</span>\n            <select\n              name=\"osc-type\"\n              value={modulationType}\n              onChange={(evt) => setModulationType(evt.target.value)}\n            >\n              {MODULATION_OPTIONS.map((options) => (\n                <option key={options.value} value={options.value}>\n                  {options.label}\n                </option>\n              ))}\n            </select>\n          </label>\n        </div>\n      )}\n      {oscType === 'pulse' && (\n        <PulseOscillatorControls oscillator={oscillator} />\n      )}\n      {oscType !== 'pulse' &&\n        (modulationType === 'fm' || modulationType === 'am') && (\n          <HarmonicOscillatorControls oscillator={oscillator} />\n        )}\n    </form>\n  )\n}\n","import React from 'react'\nimport { useCallback, useState, useEffect, useRef } from 'react'\nimport * as Tone from 'tone'\nimport { scaleLinear, scaleSymlog, NumberValue } from 'd3-scale'\nimport { AxisBottom, AxisLeft, TickFormatter } from '@vx/axis'\nimport { Group } from '@vx/group'\nimport { GridColumns, GridRows } from '@vx/grid'\n\nimport useNormalRangeParam from '../hooks/useNormalRangeParam'\nimport useFrequency from '../hooks/useFrequency'\n\nimport cs from './styles.module.css'\n\nconst WIDTH = 150\nconst HEIGHT = 150\n\nenum Margin {\n  Top = 10,\n  Right = 10,\n  Bottom = 60,\n  Left = 60,\n}\n\nconst FREQ_MAX = 20\n\n// Important to use a nonlinear scale, since our ears perceive far more difference\n//   between 2Hz and 5Hz than 25Hz and 30Hz. With a linear scale, it is hard\n//   to get precision at the lower freqs\nconst scaleFreq = scaleSymlog()\n  .domain([0, FREQ_MAX])\n  .range([0, WIDTH])\n  .clamp(true)\nconst scaleDepth = scaleLinear().domain([1, 0]).range([0, HEIGHT]).clamp(true)\n\nconst bottomTickLabelProps = () =>\n  ({\n    textAnchor: 'middle',\n    fontFamily: 'Arial',\n    fontSize: 10,\n    fill: 'white',\n  } as const)\n\nconst leftTickLabelProps = () =>\n  ({\n    fontFamily: 'Arial',\n    fontSize: 10,\n    fill: 'white',\n    textAnchor: 'end',\n    dx: '-0.25em',\n    dy: '0.25em',\n  } as const)\n\ninterface LFOProps {\n  lfo: Tone.LFO\n  leftAxisTickFormat?: TickFormatter<NumberValue>\n  leftAxisLabel?: string\n}\n\nexport default function LFOPad(props: LFOProps): JSX.Element {\n  const { lfo, leftAxisTickFormat, leftAxisLabel } = props\n  const frequencySignal = lfo.frequency\n  const depthParam = lfo.amplitude\n\n  const [freq, setFreq] = useFrequency(frequencySignal)\n  const [depth, setDepth] = useNormalRangeParam(depthParam)\n  const [dragging, setDragging] = useState(false)\n  const padRef = useRef<SVGRectElement>(null)\n\n  const markerCoords = {\n    x: scaleFreq(freq),\n    y: scaleDepth(depth),\n  }\n\n  const stopDrag = useCallback(() => {\n    setDragging(false)\n  }, [])\n\n  const updateMarkerCoords = useCallback(\n    (evt: MouseEvent) => {\n      if (!padRef.current) return\n\n      const boundingRect = padRef.current.getBoundingClientRect()\n      const x = evt.clientX - boundingRect.left\n      const y = evt.clientY - boundingRect.top\n\n      setFreq(scaleFreq.invert(x) as number)\n      setDepth(scaleDepth.invert(y) as number)\n    },\n    [setFreq, setDepth]\n  )\n\n  const handleMouseMove = useCallback(\n    (evt: MouseEvent) => {\n      if (dragging) {\n        updateMarkerCoords(evt)\n      }\n    },\n    [dragging, updateMarkerCoords]\n  )\n\n  const handleMouseDown = useCallback(\n    (evt: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n      setDragging(true)\n      updateMarkerCoords(evt.nativeEvent)\n    },\n    [updateMarkerCoords]\n  )\n\n  useEffect(() => {\n    if (dragging) {\n      document.addEventListener('mousemove', handleMouseMove)\n      document.addEventListener('mouseup', stopDrag)\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove)\n      document.removeEventListener('mouseup', stopDrag)\n    }\n  }, [dragging, handleMouseMove, stopDrag])\n\n  return (\n    <svg\n      width={WIDTH + Margin.Left + Margin.Right}\n      height={HEIGHT + Margin.Top + Margin.Bottom}\n      onMouseDown={handleMouseDown}\n      style={{ userSelect: 'none' }}\n    >\n      <Group left={Margin.Left} top={Margin.Top}>\n        <rect\n          className={cs.lfoPad}\n          ref={padRef}\n          width={WIDTH}\n          height={HEIGHT}\n          style={{ cursor: 'crosshair' }}\n        />\n        <g style={{ cursor: 'crosshair' }}>\n          <AxisBottom\n            top={HEIGHT}\n            scale={scaleFreq}\n            numTicks={5}\n            tickLength={5}\n            hideAxisLine={true}\n            stroke=\"white\"\n            tickStroke=\"white\"\n            tickLabelProps={bottomTickLabelProps}\n            label=\"Frequency\"\n            labelProps={{\n              fill: 'white',\n              fontSize: 10,\n              textAnchor: 'middle',\n            }}\n          />\n          <GridColumns\n            height={HEIGHT}\n            scale={scaleFreq}\n            stroke=\"#888\"\n            numTicks={5}\n          />\n        </g>\n        <g style={{ cursor: 'crosshair' }}>\n          <AxisLeft\n            left={0}\n            scale={scaleDepth}\n            tickLength={5}\n            tickValues={[0, 0.25, 0.5, 0.75, 1]}\n            tickFormat={leftAxisTickFormat}\n            hideAxisLine={true}\n            stroke=\"white\"\n            tickStroke=\"white\"\n            tickLabelProps={leftTickLabelProps}\n            label={leftAxisLabel}\n            labelProps={{\n              fill: 'white',\n              fontSize: 10,\n              textAnchor: 'middle',\n            }}\n            labelOffset={25}\n          />\n          <GridRows\n            width={WIDTH}\n            scale={scaleDepth}\n            stroke=\"#a6a6a6\"\n            numTicks={4}\n            tickValues={[0, 0.25, 0.5, 0.75, 1]}\n          />\n        </g>\n        <circle\n          // Avoid accidentally intercepting mouse events\n          style={{ pointerEvents: 'none' }}\n          className={cs.lfoPadMarker}\n          cx={markerCoords.x}\n          cy={markerCoords.y}\n          r={5}\n          strokeWidth={4}\n          fill=\"none\"\n        />\n      </Group>\n    </svg>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport * as Tone from 'tone'\n\nexport default function useFrequency(\n  frequencySignal: Tone.Signal<'frequency'>\n): [number, React.Dispatch<React.SetStateAction<number>>] {\n  const [freq, setFreq] = useState(() =>\n    Tone.Frequency(frequencySignal.value).toFrequency()\n  )\n\n  useEffect(() => {\n    const now = Tone.now()\n    // Make sure we don't accidentally schedule frequency changes at the same time\n    frequencySignal.cancelScheduledValues(now)\n    frequencySignal.setValueAtTime(freq, now)\n  }, [freq, frequencySignal])\n\n  return [freq, setFreq]\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport * as Tone from 'tone'\n\nexport default function useNormalRangeParam(\n  normalRangeParam: Tone.Param<'normalRange'>\n): [number, React.Dispatch<React.SetStateAction<number>>] {\n  const [value, setValue] = useState(normalRangeParam.value)\n  useEffect(() => {\n    const now = Tone.now()\n    // Make sure we don't accidentally schedule frequency changes at the same time\n    normalRangeParam.cancelScheduledValues(now)\n    normalRangeParam.setValueAtTime(value, now)\n  }, [normalRangeParam, value])\n\n  return [value, setValue]\n}\n","import * as Tone from 'tone'\n\ninterface ScaledEnvelopeOptions {\n  min: number\n  max: number\n  // Updating min/max will also affect sustain value,\n  //   in order to keep the sustained signal equal to `fixedSustain`\n  fixedSustain: number\n}\n\n/**\n * ASDR Envelope scaled to a given min-max value instead of [0, 1]\n */\nexport default class ScaledEnvelope extends Tone.Envelope {\n  readonly name: string = 'PitchEnvelope'\n\n  private scale: Tone.Scale\n\n  public readonly fixedSustain: number\n\n  constructor(options: Partial<Tone.EnvelopeOptions> & ScaledEnvelopeOptions) {\n    super({\n      ...options,\n      sustain: 0.5,\n    })\n\n    const { min, max, fixedSustain } = options\n    this.fixedSustain = fixedSustain\n    this.scale = this.output = new Tone.Scale({\n      context: this.context,\n      min,\n      max,\n    })\n\n    this._sig.connect(this.scale)\n    this.updateSustain()\n  }\n\n  private updateSustain() {\n    if (this.fixedSustain < this.min || this.fixedSustain > this.max)\n      throw new Error(\n        `ValueError: Fixed value '${this.fixedSustain}' is outside of bounds (${this.min}, ${this.max}).`\n      )\n\n    // Set sustain such that the sustained signal will equal the fixedSustain value\n    const difference = this.max - this.min\n    if (difference !== 0)\n      this.sustain = (this.fixedSustain - this.min) / (this.max - this.min)\n    else this.sustain = this.fixedSustain\n  }\n\n  get min(): number {\n    return this.scale.min\n  }\n\n  set min(val: number) {\n    if (val > this.max)\n      throw new Error(\n        `Cannot set ScaledEnvelope min value to '${val}', since it is greater than the max value '${this.max}'`\n      )\n    this.scale.min = val\n    this.updateSustain()\n  }\n\n  get max(): number {\n    return this.scale.max\n  }\n\n  set max(val: number) {\n    if (val < this.min)\n      throw new Error(\n        `Cannot set ScaledEnvelope max value to '${val}', since it is less than the max value '${this.min}'`\n      )\n    this.scale.max = val\n    this.updateSustain()\n  }\n\n  public dispose(): this {\n    super.dispose()\n    this.scale.dispose()\n    return this\n  }\n}\n","import React from 'react'\nimport { ScaleContinuousNumeric } from 'd3-scale'\n\ninterface ScaledRangeInputProps extends React.HTMLProps<HTMLInputElement> {\n  scale: ScaleContinuousNumeric<number, number>\n  onUpdate: (newValue: number) => void\n  value: number\n  min: number\n  max: number\n}\n\nexport default function ScaledRangeInput(\n  props: ScaledRangeInputProps\n): JSX.Element {\n  const { scale, value, min, max, onUpdate, ...rest } = props\n\n  return (\n    <input\n      {...rest}\n      type=\"range\"\n      min={scale.invert(min)}\n      max={scale.invert(max)}\n      value={scale.invert(value)}\n      onChange={(evt) => {\n        const newValue = scale(parseFloat(evt.target.value))\n        if (newValue !== undefined) onUpdate(newValue)\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport * as Tone from 'tone'\nimport { scalePow } from 'd3-scale'\nimport { format } from 'd3-format'\n\nimport ScaledRangeInput from '../ScaledRangeInput'\n\nimport cs from './styles.module.css'\n\nconst scaleFreq = scalePow([0, 5000], [0, 5000]).exponent(2)\n\nconst formatFreq = format(',d')\n\nconst formatQuality = format('.2f')\n\ninterface FilterOption {\n  name: string\n  value: BiquadFilterType\n}\n\nconst FILTER_OPTIONS: FilterOption[] = [\n  {\n    name: 'Low-pass',\n    value: 'lowpass',\n  },\n  {\n    name: 'High-pass',\n    value: 'highpass',\n  },\n  {\n    name: 'Band-pass',\n    value: 'bandpass',\n  },\n  {\n    name: 'All-pass',\n    value: 'allpass',\n  },\n  {\n    name: 'Low-shelf',\n    value: 'lowshelf',\n  },\n  {\n    name: 'High-shelf',\n    value: 'highshelf',\n  },\n  {\n    name: 'Notch',\n    value: 'notch',\n  },\n  {\n    name: 'Peaking',\n    value: 'peaking',\n  },\n]\n\nconst FILTERS_WITH_GAIN = new Set(['lowshelf', 'highshelf', 'peaking'])\n\ninterface FilterControllerProps {\n  filterEnvelope: Tone.FrequencyEnvelope\n  filter: Tone.Filter\n}\n\nexport default function FilterController(\n  props: FilterControllerProps\n): JSX.Element {\n  const { filterEnvelope, filter } = props\n  const [filterType, setFilterType] = useState<BiquadFilterType>('lowpass')\n  const [freq, setFreq] = useState(\n    Tone.Frequency(filterEnvelope.baseFrequency).toFrequency()\n  )\n  const [quality, setQuality] = useState(1)\n  const [gain, setGain] = useState(0)\n\n  // syncFilterFrequency\n  useEffect(() => {\n    filterEnvelope.baseFrequency = freq\n  }, [freq, filterEnvelope])\n\n  // syncFilterQuality\n  useEffect(() => {\n    const now = Tone.now()\n    filter.Q.cancelScheduledValues(now)\n    filter.Q.setValueAtTime(quality, now)\n  }, [quality, filter.Q])\n\n  // syncFilterGain\n  useEffect(() => {\n    const now = Tone.now()\n    filter.gain.cancelScheduledValues(now)\n    filter.gain.setValueAtTime(gain, now)\n  }, [gain, filter])\n\n  // syncFilterType\n  useEffect(() => {\n    filter.type = filterType\n  }, [filterType, filter])\n\n  return (\n    <form style={{ textAlign: 'center' }}>\n      <div className={cs.inlineControl}>\n        <label>\n          Type\n          <select\n            name=\"filter-type\"\n            value={filterType}\n            onChange={(evt) =>\n              setFilterType(evt.target.value as BiquadFilterType)\n            }\n          >\n            {FILTER_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Frequency\n            <output>{formatFreq(freq)} Hz</output>\n          </span>\n          <ScaledRangeInput\n            scale={scaleFreq}\n            min={0}\n            max={10000}\n            step={0.5}\n            value={freq}\n            onUpdate={setFreq}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Quality\n            <output>{formatQuality(quality)}</output>\n          </span>\n          <ScaledRangeInput\n            type=\"range\"\n            min={0.01}\n            max={50}\n            step={0.01}\n            scale={scalePow([0.01, 50], [0.01, 50]).exponent(2)}\n            value={quality}\n            onUpdate={setQuality}\n          />\n        </label>\n      </div>\n      {FILTERS_WITH_GAIN.has(filterType) && (\n        <div className={cs.control}>\n          <label>\n            <span>\n              Gain\n              <output>{gain}</output>\n            </span>\n            <input\n              type=\"range\"\n              min=\"-25\"\n              max=\"25\"\n              step=\"0.1\"\n              value={gain}\n              onChange={(evt) => setGain(parseFloat(evt.target.value))}\n            />\n          </label>\n        </div>\n      )}\n    </form>\n  )\n}\n","import React from 'react'\nimport { useCallback, useEffect, useState, useMemo } from 'react'\nimport { Group } from '@vx/group'\nimport * as Tone from 'tone'\nimport { scaleLinear } from 'd3-scale'\n\nimport { AsyncValue } from '../types'\n\nimport audioBufferSVGPath from './audioBufferSVGPath'\nimport cs from './styles.module.css'\n\nconst WIDTH = 300\nconst HEIGHT = 100\n\nconst INNER_WIDTH = 275\nconst INNER_HEIGHT = 80\n\nconst DEFAULT_SAMPLE_RATE = 48000\n\nenum Padding {\n  Left = (WIDTH - INNER_WIDTH) / 2,\n  Top = (HEIGHT - INNER_HEIGHT) / 2,\n}\n\nconst DEFAULT_BOUNDS = [0, 1]\n\nenum Margin {\n  Top = 0,\n  Right = 0,\n  Bottom = 0,\n  Left = 0,\n}\n\ninterface ToneVizProps {\n  // Amount of time to record for, in seconds\n  recordDuration: number\n  // All events scheduled with the provided context will be recorded\n  // See: Tone.Offline()\n  contextRecorder: (ctx: Tone.Context) => void\n  // The lower and upper bounds of the viz values\n  bounds?: [number, number]\n  sampleRate?: number\n}\n\nexport default function ToneViz(props: ToneVizProps): JSX.Element {\n  const {\n    contextRecorder,\n    recordDuration,\n    bounds = DEFAULT_BOUNDS, // Preserve ref equality\n    sampleRate = DEFAULT_SAMPLE_RATE,\n  } = props\n\n  const [asyncToneBuffer, setAsyncToneBuffer] = useState<\n    AsyncValue<Tone.ToneAudioBuffer>\n  >({ status: 'pending' })\n\n  const updateGraph = useCallback(() => {\n    Tone.Offline(\n      (context) => {\n        contextRecorder(context)\n      },\n      recordDuration,\n      1,\n      sampleRate\n    )\n      .then((buffer) => {\n        setAsyncToneBuffer({ status: 'ready', value: buffer })\n      })\n      .catch(() => {\n        setAsyncToneBuffer({\n          status: 'error',\n          error: 'Error creating buffer.',\n        })\n      })\n  }, [contextRecorder, recordDuration, sampleRate])\n\n  useEffect(() => {\n    updateGraph()\n  }, [updateGraph])\n\n  const path = useMemo(() => {\n    if (asyncToneBuffer.status !== 'ready') return null\n\n    return audioBufferSVGPath(\n      asyncToneBuffer.value,\n      INNER_WIDTH,\n      INNER_HEIGHT,\n      Math.min(500, sampleRate * recordDuration),\n      scaleLinear([bounds[0], bounds[1]], [0, 1])\n    )\n  }, [asyncToneBuffer, bounds, sampleRate, recordDuration])\n\n  return (\n    <svg\n      width={WIDTH + Margin.Left + Margin.Right}\n      height={HEIGHT + Margin.Top + Margin.Bottom}\n      className={cs.toneViz}\n    >\n      <Group left={Margin.Left} top={Margin.Top}>\n        <rect className={cs.window} width={WIDTH} height={HEIGHT} />\n        {/* Translate/scale so that origin is at bottom left */}\n        <Group\n          transform={`\n            translate(${Padding.Left}, ${Padding.Top + INNER_HEIGHT})\n            scale(1, -1)\n          `}\n        >\n          {path && <path d={path} className={cs.tonePath} />}\n        </Group>\n      </Group>\n    </svg>\n  )\n}\n","import * as Tone from 'tone'\nimport { range } from 'd3'\nimport { scaleLinear, ScaleContinuousNumeric } from 'd3-scale'\n\n/**\n * Return the string for an SVG path representing the data in the provided\n * ToneAudioBuffer. Values are scaled to a width x height rectangle.\n */\nexport default function audioBufferSVGPath(\n  toneBuffer: Tone.ToneAudioBuffer,\n  width: number,\n  height: number,\n  numSamples = 500,\n  // Function to normalize the values in toneBuffer to [0, 1]\n  scaleNormalize: ScaleContinuousNumeric<number, number> = scaleLinear()\n): string | null {\n  const buffer = toneBuffer.get()\n  if (!buffer) return null\n\n  const bufferData = buffer.getChannelData(0)\n\n  const length = buffer.length\n  // Resample the path so that we only draw a small number of points\n  const sampleIndexes = range(0, length, Math.ceil(length / numSamples))\n  const linePath = sampleIndexes.map((index) => {\n    const value = bufferData[index]\n    return `L ${(index / length) * width} ${\n      (scaleNormalize(value) as number) * height\n    }`\n  })\n\n  // Update the first instruction to be a (M)ove command\n  // A little messy but these are large arrays\n  linePath[0] = linePath[0].replace('L', 'M')\n\n  return linePath.join(' ')\n}\n","import * as React from 'react'\n\nimport { SelectOption } from '../types'\n\nimport { BasicEnvelopeCurve, EnvelopeCurve } from './types'\nimport cs from './styles.module.css'\n\nconst BASIC_CURVE_OPTIONS: SelectOption<BasicEnvelopeCurve>[] = [\n  { label: 'Linear', value: 'linear' as const },\n  { label: 'Exponential', value: 'exponential' as const },\n]\n\nconst ALL_CURVE_OPTIONS: SelectOption<EnvelopeCurve>[] = [\n  { label: 'Linear', value: 'linear' as const },\n  { label: 'Exponential', value: 'exponential' as const },\n  { label: 'Sine', value: 'sine' as const },\n  { label: 'Cosine', value: 'cosine' as const },\n  { label: 'Bounce', value: 'bounce' as const },\n  { label: 'Ripple', value: 'ripple' as const },\n  { label: 'Step', value: 'step' as const },\n]\n\ninterface EnvelopeCurveControllerProps {\n  attackCurve: EnvelopeCurve\n  onAttackCurveChange: (val: EnvelopeCurve) => void\n  decayCurve: BasicEnvelopeCurve\n  onDecayCurveChange: (val: BasicEnvelopeCurve) => void\n  releaseCurve: EnvelopeCurve\n  onReleaseCurveChange: (val: EnvelopeCurve) => void\n}\n\nexport default function EnvelopeCurveController(\n  props: EnvelopeCurveControllerProps\n): JSX.Element {\n  const {\n    attackCurve,\n    onAttackCurveChange,\n    decayCurve,\n    onDecayCurveChange,\n    releaseCurve,\n    onReleaseCurveChange,\n  } = props\n\n  return (\n    <>\n      <div className={cs.inlineControl}>\n        <label>\n          Attack Curve\n          <select\n            name=\"attack-curve\"\n            value={attackCurve}\n            onChange={(evt) =>\n              onAttackCurveChange(evt.target.value as EnvelopeCurve)\n            }\n          >\n            {ALL_CURVE_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div className={cs.inlineControl}>\n        <label>\n          Decay Curve\n          <select\n            name=\"decay-curve\"\n            value={decayCurve}\n            onChange={(evt) =>\n              onDecayCurveChange(evt.target.value as BasicEnvelopeCurve)\n            }\n          >\n            {BASIC_CURVE_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div className={cs.inlineControl}>\n        <label>\n          Release Curve\n          <select\n            name=\"release-curve\"\n            value={releaseCurve}\n            onChange={(evt) =>\n              onReleaseCurveChange(evt.target.value as EnvelopeCurve)\n            }\n          >\n            {ALL_CURVE_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { useCallback, useState, useEffect } from 'react'\nimport * as Tone from 'tone'\nimport { scalePow } from 'd3-scale'\nimport { format } from 'd3-format'\n\nimport ScaledRangeInput from '../ScaledRangeInput'\n\nimport ToneViz from './ToneViz'\nimport { BasicEnvelopeCurve, EnvelopeCurve } from './types'\nimport cs from './styles.module.css'\nimport EnvelopeCurveController from './EnvelopeCurveController'\n\nconst MAX_ONSET_DURATION = 4\nconst SUSTAIN_DURATION = 0.5\nconst MAX_RELEASE = 4\nconst TOTAL_WIDTH_DURATION = MAX_ONSET_DURATION + SUSTAIN_DURATION + MAX_RELEASE\n\n// NOTE: 3000 seems to be the minimum for at least Chrome\nconst ENVELOPE_SAMPLE_RATE = 3000\n\nconst scaleOnsetDuration = scalePow().exponent(2).domain([0, 4]).range([0, 4])\nconst formatTime = format('.2f')\nconst formatPercent = format('.1%')\n\ninterface EnvelopeControllerProps {\n  envelope: Tone.Envelope\n}\n\nexport default function EnvelopeController(\n  props: EnvelopeControllerProps\n): JSX.Element {\n  const { envelope } = props\n  const [onsetDuration, setOnsetDuration] = useState(() => {\n    const attack = Tone.Time(envelope.attack).toSeconds()\n    const decay = Tone.Time(envelope.decay).toSeconds()\n    return attack + decay\n  })\n\n  const [percentAttack, setPercentAttack] = useState(() => {\n    const attack = Tone.Time(envelope.attack).toSeconds()\n    const decay = Tone.Time(envelope.decay).toSeconds()\n    const totalTime = attack + decay\n    return attack / totalTime\n  })\n\n  const [sustain, setSustain] = useState(envelope.sustain)\n\n  const [release, setRelease] = useState(() =>\n    Tone.Time(envelope.release).toSeconds()\n  )\n\n  const [attackCurve, setAttackCurve] = useState<EnvelopeCurve>(\n    envelope.attackCurve as EnvelopeCurve\n  )\n  const [decayCurve, setDecayCurve] = useState<BasicEnvelopeCurve>(\n    envelope.decayCurve\n  )\n  const [releaseCurve, setReleaseCurve] = useState<EnvelopeCurve>(\n    envelope.releaseCurve as EnvelopeCurve\n  )\n\n  const recordEnvelope = useCallback(\n    (context: Tone.Context) => {\n      const env = new Tone.Envelope({\n        context,\n        attack: percentAttack * onsetDuration,\n        decay: (1 - percentAttack) * onsetDuration,\n        sustain,\n        release,\n        attackCurve,\n        decayCurve,\n        releaseCurve,\n      }).toDestination()\n      env.triggerAttackRelease(onsetDuration + SUSTAIN_DURATION)\n    },\n    [\n      percentAttack,\n      onsetDuration,\n      sustain,\n      release,\n      attackCurve,\n      decayCurve,\n      releaseCurve,\n    ]\n  )\n\n  // syncAttackDecay\n  useEffect(() => {\n    envelope.attack = onsetDuration * percentAttack\n    envelope.decay = onsetDuration * (1 - percentAttack)\n  }, [envelope, onsetDuration, percentAttack])\n\n  // syncSustain\n  useEffect(() => {\n    envelope.sustain = sustain\n  }, [envelope, sustain])\n\n  // syncRelease\n  useEffect(() => {\n    envelope.release = release\n  }, [envelope, release])\n\n  // syncCurves\n  useEffect(() => {\n    envelope.attackCurve = attackCurve\n    envelope.decayCurve = decayCurve\n    envelope.releaseCurve = releaseCurve\n  }, [envelope, attackCurve, decayCurve, releaseCurve])\n\n  return (\n    <div>\n      <ToneViz\n        contextRecorder={recordEnvelope}\n        recordDuration={TOTAL_WIDTH_DURATION}\n        sampleRate={ENVELOPE_SAMPLE_RATE}\n      />\n      <div className={cs.control}>\n        <label>\n          <span>\n            Onset\n            <output>{formatTime(onsetDuration)}s</output>\n          </span>\n          <ScaledRangeInput\n            scale={scaleOnsetDuration}\n            min={0.01}\n            max={MAX_ONSET_DURATION}\n            step=\"0.01\"\n            value={onsetDuration}\n            onUpdate={setOnsetDuration}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Attack-Decay Split\n            <output>{formatPercent(percentAttack)}</output>\n          </span>\n          <input\n            type=\"range\"\n            min={0}\n            max={0.999}\n            step=\"0.001\"\n            value={percentAttack}\n            onChange={(evt) => setPercentAttack(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Sustain\n            <output>{formatPercent(sustain)}</output>\n          </span>\n          <input\n            type=\"range\"\n            min={0}\n            max={1}\n            step=\"0.01\"\n            value={sustain}\n            onChange={(evt) => setSustain(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Release\n            <output>{formatTime(release)}s</output>\n          </span>\n          <input\n            type=\"range\"\n            min={0.01}\n            max={MAX_RELEASE}\n            step=\"0.1\"\n            value={release}\n            onChange={(evt) => setRelease(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <EnvelopeCurveController\n        attackCurve={attackCurve}\n        onAttackCurveChange={setAttackCurve}\n        decayCurve={decayCurve}\n        onDecayCurveChange={setDecayCurve}\n        releaseCurve={releaseCurve}\n        onReleaseCurveChange={setReleaseCurve}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { useState, useCallback, useEffect } from 'react'\nimport * as Tone from 'tone'\nimport { scalePow } from 'd3-scale'\nimport { format } from 'd3-format'\n\nimport ScaledRangeInput from '../ScaledRangeInput'\n\nimport ScaledEnvelope from './ScaledEnvelope'\nimport ToneViz from './ToneViz'\nimport { BasicEnvelopeCurve, EnvelopeCurve } from './types'\nimport EnvelopeCurveController from './EnvelopeCurveController'\nimport cs from './styles.module.css'\n\nconst MAX_ONSET_DURATION = 4\nconst SUSTAIN_DURATION = 0.5\nconst MAX_RELEASE = 4\nconst TOTAL_WIDTH_DURATION = MAX_ONSET_DURATION + SUSTAIN_DURATION + MAX_RELEASE\n\n// NOTE: 3000 seems to be the minimum for at least Chrome\nconst ENVELOPE_SAMPLE_RATE = 3000\n\nconst scaleOnsetDuration = scalePow().exponent(2).domain([0, 4]).range([0, 4])\nconst formatTime = format('.2f')\nconst formatPercent = format('.1%')\nconst VIZ_BOUNDS: [number, number] = [-2400, 2400]\n\ninterface ScaledEnvelopeControllerProps {\n  envelope: ScaledEnvelope\n  min: number\n  minLabel: string\n  formatMin: (val: number) => string\n  max: number\n  maxLabel: string\n  formatMax: (val: number) => string\n  step: number\n}\n\nexport default function ScaledEnvelopeController(\n  props: ScaledEnvelopeControllerProps\n): JSX.Element {\n  const {\n    envelope,\n    min,\n    minLabel,\n    formatMin,\n    max,\n    maxLabel,\n    formatMax,\n    step,\n  } = props\n  const [onsetDuration, setOnsetDuration] = useState(() => {\n    const attack = Tone.Time(envelope.attack).toSeconds()\n    const decay = Tone.Time(envelope.decay).toSeconds()\n    return attack + decay\n  })\n\n  const [percentAttack, setPercentAttack] = useState(() => {\n    const attack = Tone.Time(envelope.attack).toSeconds()\n    const decay = Tone.Time(envelope.decay).toSeconds()\n    const totalTime = attack + decay\n    return attack / totalTime\n  })\n\n  const [envelopeMin, setEnvelopeMin] = useState(envelope.min)\n  const [envelopeMax, setEnvelopeMax] = useState(envelope.max)\n\n  const [release, setRelease] = useState(() =>\n    Tone.Time(envelope.release).toSeconds()\n  )\n\n  const [attackCurve, setAttackCurve] = useState<EnvelopeCurve>(\n    envelope.attackCurve as EnvelopeCurve\n  )\n  const [decayCurve, setDecayCurve] = useState<BasicEnvelopeCurve>(\n    envelope.decayCurve\n  )\n  const [releaseCurve, setReleaseCurve] = useState<EnvelopeCurve>(\n    envelope.releaseCurve as EnvelopeCurve\n  )\n\n  const recordEnvelope = useCallback(\n    (context: Tone.Context) => {\n      const env = new ScaledEnvelope({\n        context,\n        attack: percentAttack * onsetDuration,\n        decay: (1 - percentAttack) * onsetDuration,\n        release,\n        attackCurve,\n        decayCurve,\n        releaseCurve,\n        min: envelopeMin,\n        max: envelopeMax,\n        fixedSustain: 0,\n      }).toDestination()\n      env.triggerAttackRelease(onsetDuration + SUSTAIN_DURATION)\n    },\n    [\n      percentAttack,\n      onsetDuration,\n      release,\n      attackCurve,\n      decayCurve,\n      releaseCurve,\n      envelopeMin,\n      envelopeMax,\n    ]\n  )\n\n  // syncAttackDecay\n  useEffect(() => {\n    envelope.attack = onsetDuration * percentAttack\n    envelope.decay = onsetDuration * (1 - percentAttack)\n  }, [envelope, onsetDuration, percentAttack])\n\n  // syncMin\n  useEffect(() => {\n    envelope.min = envelopeMin\n  }, [envelope, envelopeMin])\n\n  // syncMax\n  useEffect(() => {\n    envelope.max = envelopeMax\n  }, [envelope, envelopeMax])\n\n  // syncRelease\n  useEffect(() => {\n    envelope.release = release\n  }, [envelope, release])\n\n  // syncCurves\n  useEffect(() => {\n    envelope.attackCurve = attackCurve\n    envelope.decayCurve = decayCurve\n    envelope.releaseCurve = releaseCurve\n  }, [envelope, attackCurve, decayCurve, releaseCurve])\n\n  return (\n    <div>\n      <ToneViz\n        contextRecorder={recordEnvelope}\n        recordDuration={TOTAL_WIDTH_DURATION}\n        bounds={VIZ_BOUNDS}\n        sampleRate={ENVELOPE_SAMPLE_RATE}\n      />\n      <div className={cs.control}>\n        <label>\n          <span>\n            Onset\n            <output>{formatTime(onsetDuration)}s</output>\n          </span>\n          <ScaledRangeInput\n            scale={scaleOnsetDuration}\n            min={0.01}\n            max={MAX_ONSET_DURATION}\n            step=\"0.01\"\n            value={onsetDuration}\n            onUpdate={setOnsetDuration}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Attack-Decay Split\n            <output>{formatPercent(percentAttack)}</output>\n          </span>\n          <input\n            type=\"range\"\n            min={0}\n            max={0.999}\n            step=\"0.001\"\n            value={percentAttack}\n            onChange={(evt) => setPercentAttack(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            {minLabel}\n            <output>{formatMin(envelopeMin)}</output>\n          </span>\n          <input\n            type=\"range\"\n            min={min}\n            max={envelope.fixedSustain}\n            step={step}\n            value={envelopeMin}\n            onChange={(evt) => setEnvelopeMin(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            {maxLabel}\n            <output>{formatMax(envelopeMax)}</output>\n          </span>\n          <input\n            type=\"range\"\n            min={envelope.fixedSustain}\n            max={max}\n            step={step}\n            value={envelopeMax}\n            onChange={(evt) => setEnvelopeMax(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Release\n            <output>{formatTime(release)}s</output>\n          </span>\n          <input\n            type=\"range\"\n            min={0.01}\n            max={MAX_RELEASE}\n            step=\"0.1\"\n            value={release}\n            onChange={(evt) => setRelease(parseFloat(evt.target.value))}\n          />\n        </label>\n      </div>\n      <EnvelopeCurveController\n        attackCurve={attackCurve}\n        onAttackCurveChange={setAttackCurve}\n        decayCurve={decayCurve}\n        onDecayCurveChange={setDecayCurve}\n        releaseCurve={releaseCurve}\n        onReleaseCurveChange={setReleaseCurve}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { useState, useEffect, useMemo } from 'react'\nimport { Group } from '@vx/group'\nimport { AxisBottom, AxisLeft } from '@vx/axis'\nimport { Grid } from '@vx/grid'\nimport * as Tone from 'tone'\nimport { range } from 'd3'\nimport { scaleLinear, scaleSymlog } from 'd3-scale'\nimport { format } from 'd3-format'\n\nimport cs from './styles.module.css'\n\nenum Padding {\n  Top = 10,\n  Right = 12.5,\n  Bottom = 10,\n  Left = 40,\n}\n\nenum Margin {\n  Top = 0,\n  Right = 0,\n  Bottom = 0,\n  Left = 0,\n}\n\nconst INNER_WIDTH = 400\nconst INNER_HEIGHT = 200\n\nconst WIDTH = INNER_WIDTH + Padding.Left + Padding.Right\nconst HEIGHT = INNER_HEIGHT + Padding.Top + Padding.Bottom\n\nconst MAX_FREQ = 20_000\nconst scaleFreq = scaleSymlog([0, MAX_FREQ], [0, INNER_WIDTH]).constant(100)\nconst formatFreq = format('.2s')\n\nconst scaleDecibels = scaleLinear([-100, 0], [0, INNER_HEIGHT])\nconst axisScaleDecibels = scaleLinear(\n  [scaleDecibels.domain()[1], scaleDecibels.domain()[0]],\n  scaleDecibels.range()\n)\n\nconst xAxisTickValues = [75, 250, 750, 2_500, 7_500, MAX_FREQ]\n\ninterface FFTVizProps {\n  meter: Tone.FFT\n}\n\n/*\n * Render a Tone.FFT instance\n */\nexport default function FFTViz(props: FFTVizProps): JSX.Element {\n  const { meter } = props\n\n  const [buffer, setBuffer] = useState<Float32Array>(new Float32Array())\n\n  const path = useMemo(() => {\n    const indexes = range(0, buffer.length)\n\n    return indexes\n      .map((index) => {\n        const value = buffer[index]\n        const svgPathCommand = index === 0 ? 'M' : 'L'\n        const freq = meter.getFrequencyOfIndex(index)\n        return `${svgPathCommand} ${scaleFreq(freq) as number} ${\n          scaleDecibels(value) as number\n        }`\n      })\n      .join(' ')\n  }, [buffer, meter])\n\n  useEffect(() => {\n    const intervalId = setInterval(() => setBuffer(meter.getValue()), 16)\n    return () => clearInterval(intervalId)\n  }, [meter])\n\n  return (\n    <svg\n      width={WIDTH + Margin.Left + Margin.Right}\n      height={HEIGHT + Margin.Top + Margin.Bottom}\n      className={cs.toneViz}\n    >\n      <Group left={Margin.Left} top={Margin.Top}>\n        <rect className={cs.window} width={WIDTH} height={HEIGHT} />\n        <Group left={Padding.Left} top={Padding.Top}>\n          {/* Translate/scale so that origin is at bottom left */}\n          <Grid\n            xScale={scaleFreq}\n            yScale={axisScaleDecibels}\n            columnTickValues={xAxisTickValues}\n            width={INNER_WIDTH}\n            height={INNER_HEIGHT}\n          />\n          <AxisBottom\n            scale={scaleFreq}\n            top={INNER_HEIGHT / 2}\n            tickValues={xAxisTickValues}\n            tickLength={0}\n            tickFormat={formatFreq}\n            label=\"Hz\"\n          />\n          <AxisLeft\n            scale={axisScaleDecibels}\n            tickLength={0}\n            label=\"db\"\n            labelOffset={27}\n          />\n          <Group transform={`translate(0, ${INNER_HEIGHT}) scale(1, -1)`}>\n            {path && <path d={path} className={cs.tonePath} />}\n          </Group>\n        </Group>\n      </Group>\n    </svg>\n  )\n}\n","import React from 'react'\nimport { useLayoutEffect, useState, useEffect, useMemo } from 'react'\nimport { Group } from '@vx/group'\nimport { AxisLeft } from '@vx/axis'\nimport { GridRows } from '@vx/grid'\nimport * as Tone from 'tone'\nimport { range } from 'd3'\nimport { scaleLinear } from 'd3-scale'\nimport { format } from 'd3-format'\n\nimport cs from './styles.module.css'\n\nenum Padding {\n  Top = 10,\n  Right = 12.5,\n  Bottom = 10,\n  Left = 40,\n}\n\nenum Margin {\n  Top = 0,\n  Right = 0,\n  Bottom = 0,\n  Left = 0,\n}\n\nconst INNER_WIDTH = 400\nconst INNER_HEIGHT = 200\n\nconst WIDTH = INNER_WIDTH + Padding.Left + Padding.Right\nconst HEIGHT = INNER_HEIGHT + Padding.Top + Padding.Bottom\n\nconst scaleAmplitude = scaleLinear([-1, 1], [0, INNER_HEIGHT])\nconst flipScaleAmplitude = scaleAmplitude.copy().range([INNER_HEIGHT, 0])\nconst formatAmplitude = format('.0%')\nconst amplitudeTickValues = [-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1]\n\n// Waveform oscilloscope trigger \"voltage\". Allows us to display a consistent waveform\nconst TRIGGER = 0\n\n/*\n * Given a buffer of data and a desired \"trigger\" level, get the indices of as many periods\n * as possible starting and ending at that trigger level.\n */\nfunction getWindowBounds(buffer: Float32Array, trigger = 0): number[] {\n  let startFound = false\n  let periodIndices = []\n  for (let i = 0; i < buffer.length; i++) {\n    if (i > 0) {\n      // Rising trigger\n      if (buffer[i - 1] < trigger && buffer[i] >= trigger) {\n        if (!startFound) {\n          startFound = true\n          periodIndices.push(i)\n        } else {\n          periodIndices.push(i)\n        }\n      }\n    }\n  }\n\n  if (!startFound) {\n    periodIndices = [0, buffer.length]\n  } else if (periodIndices.length === 1) {\n    periodIndices.push(buffer.length)\n  }\n\n  return periodIndices\n}\n\ninterface WaveformVizProps {\n  meter: Tone.Waveform\n}\n\n/*\n * Render a Tone.MeterBase instance\n */\nexport default function WaveformViz(props: WaveformVizProps): JSX.Element {\n  const { meter } = props\n\n  const [buffer, setBuffer] = useState<Float32Array>(new Float32Array())\n\n  const waveformPeriodIndices = useMemo(\n    () => getWindowBounds(buffer, TRIGGER),\n    [buffer]\n  )\n  // The number of waveform periods to draw\n  const [numPeriods, setNumPeriods] = useState(0)\n\n  useLayoutEffect(() => {\n    // Attempt to draw as many periods as the previous render, in order to maintain\n    // visual consistency between frames (i.e., no flickering between 4 periods vs 5)\n    setNumPeriods((prevNumPeriods) => {\n      const difference = waveformPeriodIndices.length - prevNumPeriods\n      // If we're only one period off from the previous render, render the same number\n      // of periods as the last frame\n      if (difference === 1) {\n        return prevNumPeriods\n      } else {\n        return waveformPeriodIndices.length\n      }\n    })\n  }, [waveformPeriodIndices, numPeriods])\n\n  const path = useMemo(() => {\n    const startIndex = waveformPeriodIndices[0]\n    const endIndex = waveformPeriodIndices[numPeriods - 1]\n    const length = endIndex - startIndex\n    const scale = scaleLinear([0, length], [0, INNER_WIDTH])\n    const indexes = range(0, length)\n\n    return indexes\n      .map((index) => {\n        const value = buffer[index + startIndex]\n        const svgPathCommand = index === 0 ? 'M' : 'L'\n        return `${svgPathCommand} ${scale(index) as number} ${\n          scaleAmplitude(value) as number\n        }`\n      })\n      .join(' ')\n  }, [buffer, numPeriods, waveformPeriodIndices])\n\n  useEffect(() => {\n    const intervalId = setInterval(\n      // Must wrap in a Float32Array since meter.getValue() returns a pointer to\n      // the same array every time\n      () => setBuffer(new Float32Array(meter.getValue())),\n      16\n    )\n    return () => clearInterval(intervalId)\n  }, [meter])\n\n  return (\n    <svg\n      width={WIDTH + Margin.Left + Margin.Right}\n      height={HEIGHT + Margin.Top + Margin.Bottom}\n      className={cs.toneViz}\n    >\n      <Group left={Margin.Left} top={Margin.Top}>\n        <rect className={cs.window} width={WIDTH} height={HEIGHT} />\n        <Group left={Padding.Left} top={Padding.Top}>\n          <AxisLeft\n            scale={flipScaleAmplitude}\n            tickFormat={formatAmplitude}\n            tickValues={amplitudeTickValues}\n            tickLength={0}\n          />\n          <GridRows\n            scale={flipScaleAmplitude}\n            tickValues={amplitudeTickValues}\n            width={INNER_WIDTH}\n          />\n          <line\n            x1={0}\n            y1={INNER_HEIGHT / 2}\n            x2={INNER_WIDTH}\n            y2={INNER_HEIGHT / 2}\n            stroke=\"gray\"\n          />\n          {/* Translate/scale so that origin is at bottom left */}\n          <Group transform={`translate(0, ${INNER_HEIGHT}) scale(1, -1)`}>\n            {path && <path d={path} className={cs.waveformPath} />}\n          </Group>\n        </Group>\n      </Group>\n    </svg>\n  )\n}\n","import React from 'react'\nimport { useCallback } from 'react'\n\nimport cs from './styles.module.css'\n\ninterface HarmonicsControllerProps {\n  subOscEnabled: boolean\n  onSubOscEnabledChange: (v: boolean) => void\n  subSubOscEnabled: boolean\n  onSubSubOscEnabledChange: (v: boolean) => void\n}\n\nexport default function HarmonicsController(\n  props: HarmonicsControllerProps\n): JSX.Element {\n  const {\n    subOscEnabled,\n    subSubOscEnabled,\n    onSubOscEnabledChange,\n    onSubSubOscEnabledChange,\n  } = props\n\n  const handleSubOscChange = useCallback(() => {\n    onSubOscEnabledChange(!subOscEnabled)\n  }, [subOscEnabled, onSubOscEnabledChange])\n\n  const handleSubSubOscChange = useCallback(\n    (evt) => {\n      onSubSubOscEnabledChange(!subSubOscEnabled)\n    },\n    [subSubOscEnabled, onSubSubOscEnabledChange]\n  )\n\n  return (\n    <form style={{ textAlign: 'center', width: 300 }}>\n      <div className={cs.inlineControl}>\n        <label>\n          1x\n          <input\n            type=\"checkbox\"\n            name=\"sub-osc\"\n            checked={subOscEnabled}\n            onChange={handleSubOscChange}\n          />\n        </label>\n        <label>\n          2x\n          <input\n            type=\"checkbox\"\n            name=\"sub-sub-osc\"\n            checked={subSubOscEnabled}\n            onChange={handleSubSubOscChange}\n          />\n        </label>\n      </div>\n    </form>\n  )\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { scalePow } from 'd3-scale'\nimport { format } from 'd3-format'\nimport * as Tone from 'tone'\n\nimport ScaledRangeInput from '../ScaledRangeInput'\n\nimport cs from './styles.module.css'\n\nconst scaleDelay = scalePow().exponent(2).domain([0, 1]).range([0, 1])\nconst scaleFeedback = scalePow().exponent(2).domain([0, 1]).range([0, 1])\n\nconst formatNumber = format('.2f')\nconst formatPercent = format('.0%')\n\ninterface DelayModuleProps {\n  delayNode: Tone.FeedbackDelay\n  disabled: boolean\n  onDisabledChange: (disabled: boolean) => void\n}\n\nexport default function DelayModule(props: DelayModuleProps): JSX.Element {\n  const { delayNode, disabled, onDisabledChange } = props\n\n  const [delayTime, setDelayTime] = useState(0.2)\n  const [feedback, setFeedback] = useState(0.2)\n\n  // syncDelay\n  useEffect(() => {\n    const now = Tone.now()\n    delayNode.delayTime.setValueAtTime(delayTime, now)\n  }, [delayTime, delayNode.delayTime])\n\n  // syncFeedback\n  useEffect(() => {\n    const now = Tone.now()\n    delayNode.feedback.setValueAtTime(feedback, now)\n  }, [feedback, delayNode.feedback])\n\n  return (\n    <form style={{ textAlign: 'center', width: 300 }}>\n      <div className={cs.inlineControl}>\n        <label>\n          <span>Enabled</span>\n          <input\n            type=\"checkbox\"\n            onChange={(evt) => onDisabledChange(!evt.target.checked)}\n            checked={!disabled}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Delay Time\n            <output>{formatNumber(delayTime)}s</output>\n          </span>\n          <ScaledRangeInput\n            scale={scaleDelay}\n            min={0}\n            max={1}\n            step=\"0.01\"\n            value={delayTime}\n            onUpdate={setDelayTime}\n            disabled={disabled}\n          />\n        </label>\n      </div>\n      <div className={cs.control}>\n        <label>\n          <span>\n            Feedback\n            <output>{formatPercent(feedback)}</output>\n          </span>\n          <ScaledRangeInput\n            scale={scaleFeedback}\n            min={0}\n            max={0.99}\n            step=\"0.01\"\n            value={feedback}\n            onUpdate={setFeedback}\n            disabled={disabled}\n          />\n        </label>\n      </div>\n    </form>\n  )\n}\n","import React from 'react'\nimport { useState, useMemo, useCallback, useLayoutEffect } from 'react'\nimport * as Tone from 'tone'\nimport { format } from 'd3-format'\nimport cx from 'classnames'\n\nimport RibbonKeyboard from './RibbonKeyboard'\nimport VCO from './VCO'\nimport LFOPad from './LFOPad'\nimport ScaledEnvelope from './ScaledEnvelope'\nimport FilterController from './FilterController'\nimport EnvelopeController from './EnvelopeController'\nimport ScaledEnvelopeController from './ScaledEnvelopeController'\nimport FFTViz from './FFTViz'\nimport WaveformViz from './WaveformViz'\nimport HarmonicsController from './HarmonicsController'\nimport DelayModule from './DelayModule'\nimport cs from './styles.module.css'\n\n// Avoid lookAhead delay https://github.com/Tonejs/Tone.js/issues/306\nTone.context.lookAhead = 0\n\nconst positiveSemitoneFormat = format('+')\n\nconst detuneFormat = format('.1f')\n\nexport default function MonoSynth(): JSX.Element {\n  const synth = useMemo(() => new Tone.MonoSynth().toDestination(), [])\n  const fft = useMemo(() => new Tone.FFT(1024), [])\n  const waveform = useMemo(() => new Tone.Waveform(2048), [])\n  const subOscillator = useMemo(\n    () => new Tone.Oscillator({ type: 'sine', context: synth.context }),\n    [synth.context]\n  )\n  const [subOscEnabled, setSubOscEnabled] = useState(false)\n  const subSubOscillator = useMemo(\n    () => new Tone.Oscillator({ type: 'sine', context: synth.context }),\n    [synth.context]\n  )\n  const [subSubOscEnabled, setSubSubOscEnabled] = useState(false)\n\n  const delayNode = useMemo(() => new Tone.FeedbackDelay(), [])\n  const [delayDisabled, setDelayDisabled] = useState(true)\n\n  const detuneLFO = useMemo(\n    () => new Tone.LFO({ amplitude: 0, max: 1200, min: -1200 }),\n    []\n  )\n\n  const pitchEnvelope = useMemo(\n    () =>\n      new ScaledEnvelope({\n        min: -1200,\n        max: 1200,\n        fixedSustain: 0,\n      }),\n    []\n  )\n\n  const triggerAttack = useCallback(\n    (note: string | number | Tone.FrequencyClass<number>) => {\n      const now = synth.now()\n      synth.triggerAttack(note, now)\n      pitchEnvelope.triggerAttack(now)\n\n      // Set frequencies for sub oscillators\n      const freq = Tone.Frequency(note).toFrequency()\n      subOscillator.frequency.setValueAtTime(freq / 2, now)\n      subOscillator.start(now)\n      subSubOscillator.frequency.setValueAtTime(freq / 4, now)\n      subSubOscillator.start(now)\n    },\n    [synth, subOscillator, subSubOscillator, pitchEnvelope]\n  )\n\n  const triggerRelease = useCallback(() => {\n    synth.triggerRelease()\n    subOscillator.stop()\n    subSubOscillator.stop()\n    pitchEnvelope.triggerRelease()\n  }, [synth, subOscillator, subSubOscillator, pitchEnvelope])\n\n  const changeFrequency = useCallback(\n    (hz: number) => {\n      const now = Tone.now()\n      synth.oscillator.frequency.setValueAtTime(hz, now)\n      subOscillator.frequency.setValueAtTime(hz / 2, now)\n      subSubOscillator.frequency.setValueAtTime(hz / 4, now)\n    },\n    [synth.oscillator, subOscillator, subSubOscillator]\n  )\n\n  const formatDetune = useCallback(\n    (detune: number) => `${detuneFormat(detune / 100)} st`,\n    []\n  )\n\n  // manageSynth\n  // Wire up the detune LFO\n  useLayoutEffect(() => {\n    detuneLFO.connect(synth.detune).start()\n    return () => {\n      detuneLFO.stop().disconnect()\n    }\n  }, [detuneLFO, synth.detune])\n\n  // Wire up the pitch envelope\n  useLayoutEffect(() => {\n    pitchEnvelope.connect(synth.detune)\n    return () => {\n      pitchEnvelope.disconnect()\n    }\n  }, [pitchEnvelope, synth.detune])\n\n  useLayoutEffect(() => {\n    // Pass the synth through the FFT so we can record the frequency distribution\n    synth.connect(fft)\n    synth.connect(waveform)\n\n    if (!delayDisabled) synth.chain(delayNode, synth.context.destination)\n    else synth.toDestination()\n\n    if (subOscEnabled) {\n      subOscillator.connect(synth.filter)\n    }\n    if (subSubOscEnabled) {\n      subSubOscillator.connect(synth.filter)\n    }\n\n    return () => {\n      subOscillator.disconnect()\n      subSubOscillator.disconnect()\n      synth.disconnect()\n      synth.toDestination()\n    }\n  }, [\n    synth,\n    delayNode,\n    delayDisabled,\n    fft,\n    waveform,\n    subOscillator,\n    subSubOscillator,\n    subOscEnabled,\n    subSubOscEnabled,\n  ])\n\n  return (\n    <div className={cs.synthContainer}>\n      <div className={cx(cs.keyboardContainer, cs.fixedFooter)}>\n        <RibbonKeyboard\n          onFrequencyChange={changeFrequency}\n          triggerAttack={triggerAttack}\n          triggerRelease={triggerRelease}\n        />\n      </div>\n      <div className={cs.synthControls}>\n        <div>\n          <header>Spectrum Analyzer</header>\n          <FFTViz meter={fft} />\n        </div>\n        <div>\n          <header>Waveform Analyzer</header>\n          <WaveformViz meter={waveform} />\n        </div>\n      </div>\n      <div className={cs.synthControls}>\n        <div style={{ width: 300 }}>\n          <header>Oscillator</header>\n          <VCO oscillator={synth.oscillator} />\n          <HarmonicsController\n            subOscEnabled={subOscEnabled}\n            subSubOscEnabled={subSubOscEnabled}\n            onSubOscEnabledChange={setSubOscEnabled}\n            onSubSubOscEnabledChange={setSubSubOscEnabled}\n          />\n        </div>\n        <div style={{ width: 300 }}>\n          <header>Filter</header>\n          <FilterController\n            filterEnvelope={synth.filterEnvelope}\n            filter={synth.filter}\n          />\n        </div>\n        <div>\n          <header>LFO</header>\n          <LFOPad\n            lfo={detuneLFO}\n            leftAxisTickFormat={(d) => positiveSemitoneFormat(d.valueOf() * 12)}\n            leftAxisLabel=\"Pitch\"\n          />\n        </div>\n        <div style={{ width: 300 }}>\n          <header>Delay</header>\n          <DelayModule\n            delayNode={delayNode}\n            disabled={delayDisabled}\n            onDisabledChange={setDelayDisabled}\n          />\n        </div>\n      </div>\n      <div className={cs.synthControls}>\n        <div>\n          <header>Amplitude Envelope</header>\n          <EnvelopeController envelope={synth.envelope} />\n        </div>\n        <div>\n          <header>Pitch Envelope</header>\n          <ScaledEnvelopeController\n            envelope={pitchEnvelope}\n            min={-2400}\n            minLabel=\"Detune Min\"\n            formatMin={formatDetune}\n            max={2400}\n            maxLabel=\"Detune Max\"\n            formatMax={formatDetune}\n            step={10}\n          />\n        </div>\n        <div>\n          <header>Filter Envelope</header>\n          <EnvelopeController envelope={synth.filterEnvelope} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport * as Tone from 'tone'\n\nimport MonoSynth from './MonoSynth'\nimport './App.css'\n\nfunction App(): JSX.Element {\n  const [started, setStarted] = useState(false)\n\n  return (\n    <div className=\"App\">\n      <main className=\"container\">\n        {!started ? (\n          <div>\n            <h1>Digital Monosynth</h1>\n            <button\n              className=\"start-btn\"\n              onClick={() => {\n                setStarted(true)\n                Tone.start()\n              }}\n            >\n              Start\n            </button>\n            <h5>Warning: only Chrome is supported</h5>\n          </div>\n        ) : (\n          <MonoSynth />\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}